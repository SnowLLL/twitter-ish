{"version":3,"sources":["tweets/components.js","lookup/lookup.js","App.js","reportWebVitals.js","index.js"],"names":["TweetForm","props","textAreaRef","React","createRef","useState","newtweets","setNewtweets","className","onSubmit","event","preventDefault","newValue","current","value","tempNewtweets","unshift","content","id","likes","required","name","ref","type","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","finalList","concat","length","callback","xml","XMLHttpRequest","responseType","open","onload","response","status","onerror","alert","send","loadTweets","map","item","index","Tweet","tweet","ActionBtn","action","setLikes","clickedLike","setClickedLike","actionDisplay","display","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAIaA,EAAY,SAACC,GACtB,IAAIC,EAAcC,IAAMC,YADQ,EAEEC,mBAAS,IAFX,mBAEzBC,EAFyB,KAEdC,EAFc,KAgBhC,OACI,sBAAKC,UAAWP,EAAMO,UAAtB,UACI,qBAAKA,UAAU,cAAf,SACI,uBAAMC,SAhBO,SAACC,GACtBA,EAAMC,iBACN,IAAMC,EAAWV,EAAYW,QAAQC,MACjCC,EAAa,YAAOT,GAExBS,EAAcC,QAAQ,CAClBC,QAASL,EACTM,GAAI,IACJC,MAAO,IAEXZ,EAAaQ,GACbb,EAAYW,QAAQC,MAAQ,IAKpB,UACI,0BAAUM,UAAQ,EAACZ,UAAU,oBAAoBa,KAAK,QAAQC,IAAKpB,IACnE,wBAAQqB,KAAK,SAASf,UAAU,uBAAhC,wBAGR,cAAC,EAAD,CAAYF,UAAWA,QAMtBkB,EAAa,SAACvB,GAAW,IAAD,EACGI,mBAAS,IADZ,mBAC1BoB,EAD0B,KACdC,EADc,OAELrB,mBAAS,IAFJ,mBAE1BsB,EAF0B,KAElBC,EAFkB,KAsBjC,OAnBAC,qBAAU,WACN,IAAMC,EAAY,YAAI7B,EAAMK,WAAWyB,OAAON,GAC1CE,EAAOK,SAAWF,EAAUE,QAC5BJ,EAAUE,KAEf,CAAC7B,EAAMK,UAAWqB,EAAQF,IAE7BI,qBAAU,YC5CP,SAAoBI,GACvB,IAAMC,EAAM,IAAIC,eAIhBD,EAAIE,aADiB,OAErBF,EAAIG,KAJW,MACH,qCAIZH,EAAII,OAAS,WACTL,EAASC,EAAIK,SAAUL,EAAIM,SAE/BN,EAAIO,QAAU,WACVC,MAAM,6CAEVR,EAAIS,ODyCAC,EARmB,SAACL,EAAUC,GACX,MAAXA,EACAd,EAAca,GAGdG,MAAM,0BAIf,IACIf,EAAOkB,KAAI,SAACC,EAAMC,GACrB,OAAO,cAACC,EAAD,CAAOC,MAAOH,EAAMtC,UAAU,uCAA9B,UAA4EuC,EAA5E,qBAKR,SAASG,EAAUjD,GAAQ,IACtBgD,EAAkBhD,EAAlBgD,MAAOE,EAAWlD,EAAXkD,OADc,EAEH9C,mBAAS4C,EAAM9B,MAAQ8B,EAAM9B,MAAQ,GAFlC,mBAEtBA,EAFsB,KAEfiC,EAFe,OAGS/C,oBAAS,GAHlB,mBAGtBgD,EAHsB,KAGTC,EAHS,KAIvB9C,EAAYP,EAAMO,UAAYP,EAAMO,UAAY,yBAChD+C,EAAgBJ,EAAOK,QAAUL,EAAOK,QAAU,SAalDA,EAA0B,SAAhBL,EAAO5B,KAAP,UAA4BJ,EAA5B,YAAqCoC,GAArC,UAA0DA,GAC1E,OAAO,wBAAQ/C,UAAWA,EAAWiD,QAbX,SAAC/C,GACvBA,EAAMC,iBACc,SAAhBwC,EAAO5B,QACa,IAAhB8B,GACAD,EAASjC,EAAQ,GACjBmC,GAAe,KAEfF,EAASH,EAAM9B,MAAQ,GACvBmC,GAAe,MAKpB,SAA2DE,IAI/D,SAASR,EAAM/C,GAAQ,IAClBgD,EAAUhD,EAAVgD,MACFzC,EAAYP,EAAMO,UAAYP,EAAMO,UAAY,0BACtD,OACI,sBAAKA,UAAWA,EAAhB,UACI,8BAAMyC,EAAM/B,GAAZ,MAAmB+B,EAAMhC,WACzB,sBAAKT,UAAU,kBAAf,UACI,cAAC0C,EAAD,CAAWD,MAAOA,EAAOE,OAAQ,CAAE5B,KAAM,OAAQiC,QAAS,WAC1D,cAACN,EAAD,CAAWD,MAAOA,EAAOE,OAAQ,CAAE5B,KAAM,SAAUiC,QAAS,aAC5D,cAACN,EAAD,CAAWD,MAAOA,EAAOE,OAAQ,CAAE5B,KAAM,SAAUiC,QAAS,mBE7E7DE,MAZf,WACE,OACE,qBAAKlD,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,8BACE,cAAC,EAAD,WCEKmD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7ebd26e7.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { loadTweets } from '../lookup'\n\n//Form Sections\nexport const TweetForm = (props) => {\n    var textAreaRef = React.createRef()\n    const [newtweets, setNewtweets] = useState([])\n    const handleSumbitForm = (event) => {\n        event.preventDefault()\n        const newValue = textAreaRef.current.value\n        var tempNewtweets = [...newtweets] // create an array of new tweets\n        // change this to a server side call\n        tempNewtweets.unshift({\n            content: newValue,\n            id: 123,\n            likes: 0\n        })\n        setNewtweets(tempNewtweets)\n        textAreaRef.current.value = ''\n    }\n    return (\n        <div className={props.className}>\n            <div className=\"col-12 mb-3\">\n                <form onSubmit={handleSumbitForm}>\n                    <textarea required className='form-control mt-5' name=\"tweet\" ref={textAreaRef}></textarea>\n                    <button type=\"submit\" className=\"btn btn-primary my-2\">Tweet</button>\n                </form>\n            </div>\n            <TweetsList newtweets={newtweets} />\n        </div>\n    );\n}\n\n// Tweet sections\nexport const TweetsList = (props) => {\n    const [tweetsInit, setTweetsInit] = useState([])\n    const [tweets, setTweets] = useState([])\n    useEffect(() => {\n        const finalList = [...props.newtweets].concat(tweetsInit)\n        if (tweets.length !== finalList.length) {\n            setTweets(finalList)\n        }\n    }, [props.newtweets, tweets, tweetsInit])\n\n    useEffect(() => {\n        // do my lookup\n        const myCallback = (response, status) => {\n            if (status === 200) {\n                setTweetsInit(response)\n            }\n            else {\n                alert('there is an error')\n            }\n        }\n        loadTweets(myCallback)\n    }, [])\n    return tweets.map((item, index) => {\n        return <Tweet tweet={item} className='my-5 py-5 border bg-white text-dark' key={`${index}-{ item.id }`} /> // `` NOT ''\n    })\n}\n\n// Action: like unlike retween btns\nexport function ActionBtn(props) {\n    const { tweet, action } = props\n    const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0)\n    const [clickedLike, setClickedLike] = useState(false)\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\n    const actionDisplay = action.display ? action.display : 'ACTION'\n    const handleActionClick = (event) => {\n        event.preventDefault()\n        if (action.type === 'like') {\n            if (clickedLike === true) {\n                setLikes(likes - 1)\n                setClickedLike(false)\n            } else {\n                setLikes(tweet.likes + 1)\n                setClickedLike(true)\n            }\n        }\n    }\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : `${actionDisplay}`\n    return <button className={className} onClick={handleActionClick}>{display}</button>\n}\n\n// component as props\nexport function Tweet(props) {\n    const { tweet } = props\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n    return (\n        <div className={className}>\n            < p >{tweet.id} - {tweet.content}</p >\n            <div className=\"btn btn-primary\">\n                <ActionBtn tweet={tweet} action={{ type: 'like', display: 'Likes' }} />\n                <ActionBtn tweet={tweet} action={{ type: 'unlike', display: 'UnLikes' }} />\n                <ActionBtn tweet={tweet} action={{ type: 'relike', display: 'Retweet' }} />\n            </div>\n        </div >\n    );\n}\n","export function loadTweets(callback) {\n    const xml = new XMLHttpRequest()\n    const method = \"GET\" //'POST'\n    const url = \"http://localhost:8000/api/tweets/\"\n    const responseType = 'json'\n    xml.responseType = responseType\n    xml.open(method, url)\n    xml.onload = function () {\n        callback(xml.response, xml.status)\n    }\n    xml.onerror = function () {\n        alert(\"An error occured. Please try again later\")\n    }\n    xml.send()\n}\n","import React from 'react'\nimport './App.css';\n// import only one folder b/c they do have index.js export for every export\nimport { TweetForm } from './tweets'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div>\n          <TweetForm />\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}