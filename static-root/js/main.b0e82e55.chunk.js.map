{"version":3,"sources":["lookup/lookup.js","tweets/lookup.js","tweets/buttons.js","profiles/components.js","tweets/detail.js","tweets/list.js","tweets/feed.js","tweets/create.js","tweets/components.js","reportWebVitals.js","index.js"],"names":["csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","BackendLookup","method","endpoint","callback","data","jsonData","JSON","stringify","xml","XMLHttpRequest","url","responseType","open","setRequestHeader","onload","status","response","detail","window","location","href","indexOf","onerror","e","console","log","alert","send","apiTweetList","username","nextUrl","undefined","replace","apiTweetFeed","ActionBtn","props","tweet","action","didPerformAction","likes","className","actionDisplay","display","handleBackendActionEvent","type","onClick","event","preventDefault","tweetId","id","apiTweetAction","UserLink","children","UserDisplay","user","nameDisplay","includeFullName","first_name","last_name","Fragment","UserPicture","ParentTweet","parent","Tweet","isRetweet","hiddenActions","retweeter","didRetweet","useState","actionTweet","setActionTweet","match","pathname","urlTweetId","groups","tweetid","isDetail","handlePerformAction","newActionTweet","content","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","setNextUrl","tweetsDidset","setTweetsDidset","useEffect","finalList","newtweets","concat","next","results","handleDidRetweet","newTweet","updatetweetsInit","unshift","updateFinalTweets","map","item","index","newTweetsList","TweetsFeedList","TweetCreate","textAreaRef","React","createRef","didTweet","onSubmit","newValue","current","value","required","ref","TweetDetailComponent","didLookup","setDidLookup","setTweet","handleBackendLookup","apiTweetDetail","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createElement","rId","getElementById","feedId","TweetDetailElement","querySelectorAll","ReactDOM","render","setNewtweets","canTweet","cantweet","tempNewtweets","dataset","forEach","container"],"mappings":"8MAiBA,IAAMA,EAhBN,SAAmBC,GACf,IAAIC,EAAc,KAClB,GAAIC,SAASC,QAA8B,KAApBD,SAASC,OAE5B,IADA,IAAMC,EAAUF,SAASC,OAAOE,MAAM,KAC7BC,EAAI,EAAGA,EAAIF,EAAQG,OAAQD,IAAK,CACrC,IAAMH,EAASC,EAAQE,GAAGE,OAE1B,GAAIL,EAAOM,UAAU,EAAGT,EAAKO,OAAS,KAAQP,EAAO,IAAM,CACvDC,EAAcS,mBAAmBP,EAAOM,UAAUT,EAAKO,OAAS,IAChE,OAIZ,OAAON,EAGOU,CAAU,aAEfC,EAAgB,SAACC,EAAQC,EAAUC,EAAUC,GACtD,IAAIC,EACAD,IAEAC,EAAWC,KAAKC,UAAUH,IAE9B,IAAMI,EAAM,IAAIC,eACVC,EAAG,oCAAgCR,GACzCM,EAAIG,aAAe,OACnBH,EAAII,KAAKX,EAAQS,GACjBF,EAAIK,iBAAiB,eAAgB,oBAEjC1B,IAEAqB,EAAIK,iBAAiB,mBAAoB,kBACzCL,EAAIK,iBAAiB,cAAe1B,IAKxCqB,EAAIM,OAAS,WACU,MAAfN,EAAIO,QAAkBP,EAAIQ,WAEX,kDADFR,EAAIQ,SAASC,SAGyB,IAA3CC,OAAOC,SAASC,KAAKC,QAAQ,WAC7BH,OAAOC,SAASC,KAAO,kCAInCjB,EAASK,EAAIQ,SAAUR,EAAIO,SAE/BP,EAAIc,QAAU,SAAUC,GACpBC,QAAQC,IAAI,UAAWF,GACvBG,MAAM,6CAEVlB,EAAImB,KAAKtB,ICxCN,SAASuB,EAAaC,EAAU1B,EAAU2B,GAC7C,IAAI5B,EAAW,UACX2B,IACA3B,EAAQ,2BAAuB2B,IAEnB,OAAZC,QAAgCC,IAAZD,IACpB5B,EAAW4B,EAAQE,QAAQ,6BAA8B,KAE7DhC,EAAc,MAAOE,EAAUC,GAG5B,SAAS8B,EAAa9B,EAAU2B,GACnC,IAAI5B,EAAW,cACC,OAAZ4B,QAAgCC,IAAZD,IACpB5B,EAAW4B,EAAQE,QAAQ,6BAA8B,KAE7DhC,EAAc,MAAOE,EAAUC,G,kBC3B5B,SAAS+B,EAAUC,GAAQ,IACtBC,EAAoCD,EAApCC,MAAOC,EAA6BF,EAA7BE,OAAQC,EAAqBH,EAArBG,iBACjBC,EAAQH,EAAMG,MAAQH,EAAMG,MAAQ,EACpCC,EAAYL,EAAMK,UAAYL,EAAMK,UAAY,yBAChDC,EAAgBJ,EAAOK,QAAUL,EAAOK,QAAU,SAElDC,EAA2B,SAAC3B,EAAUD,GACTuB,GAC3BA,EAAiBtB,EAAUD,IAO7B2B,EAA0B,SAAhBL,EAAOO,KAAP,UAA4BL,EAA5B,YAAqCE,GAArC,UAA0DA,GAC1E,OAAO,wBAAQD,UAAWA,EAAWK,QALX,SAACC,GACvBA,EAAMC,iBDVgB,SAACC,EAASX,EAAQlC,GAE5CH,EAAc,OAAQ,gBAAiBG,EAD1B,CAAE8C,GAAID,EAASX,OAAQA,ICUhCa,CAAed,EAAMa,GAAIZ,EAAOO,KAAMD,IAGnC,SAA2DD,ICjB/D,IAAMS,EAAW,SAAChB,GAAW,IACxBN,EAAaM,EAAbN,SAIR,OAAO,sBAAMW,UAAU,UAAUK,QAHV,SAACtB,GACpBL,OAAOC,SAASC,KAAhB,mBAAmCS,IAEhC,SACFM,EAAMiB,YAKFC,EAAc,SAAClB,GAAW,IAC3BmB,EAA0BnB,EAA1BmB,KAEFC,GAAkC,IAFNpB,EAApBqB,gBAEM,UAA8BF,EAAKG,WAAnC,YAAiDH,EAAKI,UAAtD,KAAqE,KACzF,OAAO,eAAC,IAAMC,SAAP,WACFJ,EACD,eAAC,EAAD,CAAU1B,SAAUyB,EAAKzB,SAAzB,cAAqCyB,EAAKzB,gBAIrC+B,EAAc,SAACzB,GAAW,IAC3BmB,EAASnB,EAATmB,KACR,OAAO,cAAC,EAAD,CAAUzB,SAAUyB,EAAKzB,SAAzB,SACH,sBAAOW,UAAU,8CAAjB,SAEKc,EAAKzB,SAAS,QCxBpB,SAASgC,EAAY1B,GAAQ,IACxBC,EAAUD,EAAVC,MACR,OAAOA,EAAM0B,OACP,cAACC,EAAD,CAAOC,WAAS,EAACC,eAAa,EAACC,UAAW/B,EAAM+B,UAAW9B,MAAOA,EAAM0B,SACxE,KAKH,SAASC,EAAM5B,GAAQ,IAClBC,EAA2DD,EAA3DC,MAAO+B,EAAoDhC,EAApDgC,WAAYF,EAAwC9B,EAAxC8B,cAAeD,EAAyB7B,EAAzB6B,UAAWE,EAAc/B,EAAd+B,UAD5B,EAEaE,mBAASjC,EAAMC,MAAQD,EAAMC,MAAQ,MAFlD,mBAElBiC,EAFkB,KAELC,EAFK,KAIrB9B,EAAYL,EAAMK,UAAYL,EAAMK,UAAY,kBACpDA,GAA0B,IAAdwB,EAAA,UAAwBxB,EAAxB,uBAAyDA,EAErE,IACI+B,EADSrD,OAAOC,SAASqD,SACZD,MAAL,YAAW,WAAX,cAENE,EAAaF,EAAQA,EAAMG,OAAOC,SAAW,EAG7CC,EAAW,UAAGxC,EAAMa,MAAT,UAAqBwB,GAQhCI,EAAsB,SAACC,EAAgB/D,GAC1B,MAAXA,EACAuD,EAAeQ,GAEG,MAAX/D,GACHoD,GACAA,EAAWW,IAIvB,OACI,sBAAKtC,UAAWA,EAAhB,WACmB,IAAdwB,GAAsB,sBAAKxB,UAAU,OAAf,cAAuB,uBAAMA,UAAU,mBAAhB,yBAA+C,cAAC,EAAD,CAAac,KAAMY,UAChH,sBAAK1B,UAAU,SAAf,UACI,qBAAKA,UAAU,QAAf,SACI,cAAC,EAAD,CAAac,KAAMlB,EAAMkB,SAE7B,sBAAKd,UAAU,SAAf,UAEI,gCACI,4BACI,cAAC,EAAD,CAAagB,iBAAe,EAACF,KAAMlB,EAAMkB,SAG7C,4BAAMlB,EAAM2C,UACZ,cAAElB,EAAF,CAAczB,MAAOA,EAAO8B,UAAW9B,EAAMkB,UAGjD,sBAAKd,UAAU,qBAAf,UACM6B,IAAiC,IAAlBJ,GACb,eAAC,IAAMN,SAAP,WACI,cAACzB,EAAD,CAAWE,MAAOiC,EAAa/B,iBAAkBuC,EAAqBxC,OAAQ,CAAEO,KAAM,OAAQF,QAAS,WACvG,cAACR,EAAD,CAAWE,MAAOiC,EAAa/B,iBAAkBuC,EAAqBxC,OAAQ,CAAEO,KAAM,SAAUF,QAAS,aACzG,cAACR,EAAD,CAAWE,MAAOiC,EAAa/B,iBAAkBuC,EAAqBxC,OAAQ,CAAEO,KAAM,UAAWF,QAAS,iBAEpG,IAAbkC,EAAoB,KAAO,wBAAQ3B,GAAG,WAAWT,UAAU,iCAAiCK,QA1CxF,SAACC,GACtBA,EAAMC,iBAEN7B,OAAOC,SAASC,KAAhB,UAA0BgB,EAAMa,KAuCY,gCCjE7C,IAAM+B,EAAa,SAAC7C,GAAW,IAAD,EACGiC,mBAAS,IADZ,mBAC1Ba,EAD0B,KACdC,EADc,OAELd,mBAAS,IAFJ,mBAE1Be,EAF0B,KAElBC,EAFkB,OAGHhB,mBAAS,MAHN,mBAG1BtC,EAH0B,KAGjBuD,EAHiB,OAIOjB,oBAAS,GAJhB,mBAI1BkB,EAJ0B,KAIZC,EAJY,KAKjCC,qBAAU,WACN,IAAMC,EAAY,YAAItD,EAAMuD,WAAWC,OAAOV,GAC1CE,EAAOxF,SAAW8F,EAAU9F,QAC5ByF,EAAUK,KAEf,CAACtD,EAAMuD,UAAWP,EAAQF,IAE7BO,qBAAU,WACN,IAAqB,IAAjBF,EAAwB,CASxB1D,EAAaO,EAAMN,UAPW,SAACb,EAAUD,GACtB,MAAXA,IACAsE,EAAWrE,EAAS4E,MACpBV,EAAclE,EAAS6E,SACvBN,GAAgB,UAK7B,CAACN,EAAYK,EAAcC,EAAiBpD,EAAMN,WAErD,IAAMiE,EAAmB,SAACC,GACtB,IAAMC,EAAgB,YAAOf,GAC7Be,EAAiBC,QAAQF,GACzBb,EAAcc,GAEd,IAAME,EAAiB,YAAOf,GAC9Be,EAAkBD,QAAQd,GAC1BC,EAAUc,IAkBd,OAAO,eAAC,IAAMvC,SAAP,WACFwB,EAAOgB,KAAI,SAACC,EAAMC,GACf,OAAO,cAACtC,EAAD,CACH3B,MAAOgE,EACPjC,WAAY2B,EACZtD,UAAU,uCAHP,UAIK6D,EAJL,oBAMC,MAAXvE,GAAmB,wBAAQU,UAAU,0BAA0BK,QAvB7C,SAACtB,GAEpB,GADAA,EAAEwB,iBACc,OAAZjB,EAAkB,CAUlBF,EAAaO,EAAMN,UATiB,SAACb,EAAUD,GAC3C,GAAe,MAAXA,EAAgB,CAChBsE,EAAWrE,EAAS4E,MAEpB,IAAMU,EAAgB,YAAInB,GAAQQ,OAAO3E,EAAS6E,SAClDX,EAAcoB,GACdlB,EAAUkB,MAGwCxE,KAW1C,2BC1DfyE,EAAiB,SAACpE,GAAW,IAAD,EACDiC,mBAAS,IADR,mBAC9Ba,EAD8B,KAClBC,EADkB,OAETd,mBAAS,IAFA,mBAE9Be,EAF8B,KAEtBC,EAFsB,OAGPhB,mBAAS,MAHF,mBAG9BtC,EAH8B,KAGrBuD,EAHqB,OAIGjB,oBAAS,GAJZ,mBAI9BkB,EAJ8B,KAIhBC,EAJgB,KAKrCC,qBAAU,WACN,IAAMC,EAAY,YAAItD,EAAMuD,WAAWC,OAAOV,GAC1CE,EAAOxF,SAAW8F,EAAU9F,QAC5ByF,EAAUK,KAEf,CAACtD,EAAMuD,UAAWP,EAAQF,IAE7BO,qBAAU,WACN,IAAqB,IAAjBF,EAAwB,CASxBrD,GAP8B,SAACjB,EAAUD,GACtB,MAAXA,IACAsE,EAAWrE,EAAS4E,MACpBV,EAAclE,EAAS6E,SACvBN,GAAgB,UAK7B,CAACN,EAAYK,EAAcC,EAAiBpD,EAAMN,WAErD,IAAMiE,EAAmB,SAACC,GACtB,IAAMC,EAAgB,YAAOf,GAC7Be,EAAiBC,QAAQF,GACzBb,EAAcc,GAEd,IAAME,EAAiB,YAAOf,GAC9Be,EAAkBD,QAAQd,GAC1BC,EAAUc,IAkBd,OAAO,eAAC,IAAMvC,SAAP,WACFwB,EAAOgB,KAAI,SAACC,EAAMC,GACf,OAAO,cAACtC,EAAD,CACH3B,MAAOgE,EACPjC,WAAY2B,EACZtD,UAAU,uCAHP,UAIK6D,EAJL,oBAMC,MAAXvE,GAAmB,wBAAQU,UAAU,0BAA0BK,QAvB7C,SAACtB,GAEpB,GADAA,EAAEwB,iBACc,OAAZjB,EAAkB,CAUlBG,GAToC,SAACjB,EAAUD,GAC3C,GAAe,MAAXA,EAAgB,CAChBsE,EAAWrE,EAAS4E,MAEpB,IAAMU,EAAgB,YAAInB,GAAQQ,OAAO3E,EAAS6E,SAClDX,EAAcoB,GACdlB,EAAUkB,MAGwBxE,KAW1B,2BC9DrB,SAAS0E,EAAYrE,GACxB,IAAIsE,EAAcC,IAAMC,YAChBC,EAAazE,EAAbyE,SAoBR,OACI,qBAAKpE,UAAWL,EAAMK,UAAtB,SACI,uBAAMqE,SArBW,SAAC/D,GACtBA,EAAMC,iBACN,IAAM+D,EAAWL,EAAYM,QAAQC,MNLzChH,EAAc,OAAQ,kBMQe,SAACgB,EAAUD,GACzB,MAAXA,EACA6F,EAAS5F,IAGTQ,QAAQC,IAAIT,GACZU,MAAM,uBNdgC,CAAEqD,QMkBjC+B,IACfL,EAAYM,QAAQC,MAAQ,IAKxB,UACI,0BAAUC,UAAQ,EAACzE,UAAU,oBAAoBpD,KAAK,QAAQ8H,IAAKT,IACnE,wBAAQ7D,KAAK,SAASJ,UAAU,uBAAhC,wBCrBT,IAgDM2E,EAAuB,SAAChF,GAAW,IACpCa,EAAYb,EAAZa,QADmC,EAEToB,oBAAS,GAFA,mBAEpCgD,EAFoC,KAEzBC,EAFyB,OAGjBjD,mBAAS,MAHQ,mBAGpChC,EAHoC,KAG7BkF,EAH6B,KAIrCC,EAAsB,SAACvG,EAAUD,GACpB,MAAXA,EACAuG,EAAStG,GAETU,MAAM,2CAUd,OANA8D,qBAAU,YACY,IAAd4B,KP1DL,SAAwBpE,EAAS7C,GACpCH,EAAc,MAAD,iBAAkBgD,GAAW7C,GO0DlCqH,CAAexE,EAASuE,GACxBF,GAAa,MAElB,CAACrE,EAASoE,EAAWC,IACP,OAAVjF,EAAiB,KAAO,cAAC2B,EAAD,CAAO3B,MAAOA,EAAOI,UAAWL,EAAMK,aC9D1DiF,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCARnG,EAAImF,IAAMwB,cACVC,EAAM7I,SAAS8I,eAAe,WAC9BC,EAAS/I,SAAS8I,eAAe,gBACjCE,EAAqBhJ,SAASiJ,iBAAiB,mBAIjDJ,IACAK,IAASC,OAAOlH,GFiBK,SAACY,GAAU,MAIEiC,mBAAS,IAJX,mBAIzBsB,EAJyB,KAIdgD,EAJc,KAM1BC,EAA8B,UAAnBxG,EAAMyG,SAQvB,OACI,sBAAKpG,UAAWL,EAAMK,UAAtB,WACkB,IAAbmG,GACG,cAACnC,EAAD,CAAaI,SATF,SAACb,GACpB,IAAI8C,EAAa,YAAOnD,GACxBmD,EAAc5C,QAAQF,GACtB2C,EAAaG,IAMkCrG,UAAU,gBACrD,cAAC,EAAD,2BAAgBL,GAAhB,IAAuBuD,UAAWA,UEnCbyC,EAAIW,SAAUX,GAC3C3G,QAAQC,IAAI0G,IAGZE,IACAG,IAASC,OAAOlH,GFZc,SAACY,GAAU,MAIPiC,mBAAS,IAJF,mBAIlCsB,EAJkC,KAIvBgD,EAJuB,KAMnCC,EAA8B,UAAnBxG,EAAMyG,SAQvB,OACI,sBAAKpG,UAAWL,EAAMK,UAAtB,WACkB,IAAbmG,GACG,cAACnC,EAAD,CAAaI,SATF,SAACb,GACpB,IAAI8C,EAAa,YAAOnD,GACxBmD,EAAc5C,QAAQF,GACtB2C,EAAaG,IAMkCrG,UAAU,gBACrD,cAAC,EAAD,2BAAoBL,GAApB,IAA2BuD,UAAWA,UENR2C,EAAOS,SAAUT,GACvD7G,QAAQC,IAAI4G,IAGhBC,EAAmBS,SAAQ,SAAAC,GACvBR,IAASC,OAAOlH,EAAE4F,EAAsB6B,EAAUF,SAAUE,GAC5DxH,QAAQC,IAAIuH,MAgBhBvB,M","file":"static/js/main.b0e82e55.chunk.js","sourcesContent":["// login auth \nfunction getCookie(name) {\n    let cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        const cookies = document.cookie.split(';');\n        for (let i = 0; i < cookies.length; i++) {\n            const cookie = cookies[i].trim();\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\n\nconst csrftoken = getCookie('csrftoken');\n\nexport const BackendLookup = (method, endpoint, callback, data) => {\n    let jsonData;\n    if (data) {\n        //  converts a JavaScript object or value to a JSON string\n        jsonData = JSON.stringify(data)\n    }\n    const xml = new XMLHttpRequest()\n    const url = `http://localhost:8000/api/${endpoint}`\n    xml.responseType = 'json'\n    xml.open(method, url)\n    xml.setRequestHeader('Content-Type', 'application/json')\n\n    if (csrftoken) {\n        // xml.setRequestHeader('HTTP_X_REQUESTED_WITH', 'XMLHttpRequest')\n        xml.setRequestHeader('X-Requested-With', 'XMLHttpRequest')\n        xml.setRequestHeader('X-CSRFToken', csrftoken)\n        //only work on django, not on react local site\n        // JWT token work on the react local site\n    }\n\n    xml.onload = function () {\n        if (xml.status === 403 && xml.response) {\n            var detail = xml.response.detail\n            if (detail === \"Authentication credentials were not provided.\") {\n                // return index of a string in an array: -1 = not exist\n                if (window.location.href.indexOf(\"login\") === -1) {\n                    window.location.href = '/login?showLoginRequired=true'\n                }\n            }\n        }\n        callback(xml.response, xml.status)\n    }\n    xml.onerror = function (e) {\n        console.log('error: ', e)\n        alert(\"An error occured. Please try again later\")\n    }\n    xml.send(jsonData)\n}","import { BackendLookup } from '../lookup'\n\nexport const apiTweetCreate = (newTweet, callback) => {\n    BackendLookup(\"POST\", 'tweets/create/', callback, { content: newTweet })\n}\n\nexport const apiTweetAction = (tweetId, action, callback) => {\n    const data = { id: tweetId, action: action }\n    BackendLookup(\"POST\", 'tweets/action', callback, data)\n}\n\nexport function apiTweetDetail(tweetId, callback) {\n    BackendLookup(\"GET\", `tweets/${tweetId}`, callback)\n}\n\nexport function apiTweetList(username, callback, nextUrl) {\n    let endpoint = 'tweets/'\n    if (username) {\n        endpoint = `tweets/?username=${username}`\n    }\n    if (nextUrl !== null && nextUrl !== undefined) {\n        endpoint = nextUrl.replace(\"http://localhost:8000/api/\", \"\")\n    }\n    BackendLookup(\"GET\", endpoint, callback)\n}\n\nexport function apiTweetFeed(callback, nextUrl) {\n    let endpoint = 'tweets/feed'\n    if (nextUrl !== null && nextUrl !== undefined) {\n        endpoint = nextUrl.replace(\"http://localhost:8000/api/\", \"\")\n    }\n    BackendLookup(\"GET\", endpoint, callback)\n}","import React from 'react'\nimport { apiTweetAction } from './lookup'\n\n// Action: like unlike retween btns\nexport function ActionBtn(props) {\n    const { tweet, action, didPerformAction } = props\n    const likes = tweet.likes ? tweet.likes : 0\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\n    const actionDisplay = action.display ? action.display : 'ACTION'\n    //backend \n    const handleBackendActionEvent = (response, status) => {\n        if ((status === 200 || 201) && didPerformAction) {\n            didPerformAction(response, status)\n        }\n    }\n    const handleActionClick = (event) => {\n        event.preventDefault()\n        apiTweetAction(tweet.id, action.type, handleBackendActionEvent)\n    }\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : `${actionDisplay}`\n    return <button className={className} onClick={handleActionClick}>{display}</button>\n}","import React from 'react'\n\n// as a button\nexport const UserLink = (props) => {\n    const { username } = props\n    const handleUserLink = (e) => {\n        window.location.href = `/profile/${username}`\n    }\n    return <span className=\"pointer\" onClick={handleUserLink}>\n        {props.children}\n    </span>\n}\n\n// \nexport const UserDisplay = (props) => {\n    const { user, includeFullName } = props\n    // if includeFullName ==== true namedisplay = ?....\n    const nameDisplay = includeFullName === true ? `${user.first_name} ${user.last_name} ` : null\n    return <React.Fragment>\n        {nameDisplay}\n        <UserLink username={user.username}>@{user.username}</UserLink>\n    </React.Fragment>\n}\n\nexport const UserPicture = (props) => {\n    const { user } = props\n    return <UserLink username={user.username}>\n        < span className=\"px-3 py-2 rounded-circle bg-dark text-white\" >\n            {/* display the first letter of username */}\n            {user.username[0]}\n        </span >\n    </UserLink>\n}\n","import React, { useState } from 'react'\nimport { ActionBtn } from './buttons'\nimport { UserPicture, UserDisplay } from '../profiles'\n\n// parent API\nexport function ParentTweet(props) {\n    const { tweet } = props\n    return tweet.parent\n        ? <Tweet isRetweet hiddenActions retweeter={props.retweeter} tweet={tweet.parent} />\n        : null\n    // isRetweet,hiddenActions === true\n}\n\n// key as props\nexport function Tweet(props) {\n    const { tweet, didRetweet, hiddenActions, isRetweet, retweeter } = props\n    const [actionTweet, setActionTweet] = useState(props.tweet ? props.tweet : null)\n    // when parent here, change style -> add border\n    let className = props.className ? props.className : 'col-10 col-md-6'\n    className = isRetweet === true ? `${className} border rounded p-2` : className\n\n    const path = window.location.pathname\n    var match = path.match(/(?<tweetid>\\d+)/) // /(?P<id>\\d+)/ in python\n    // match = e.g [\"111\", \"111\", index: 1, input: \"/111\", groups: {…}]\n    const urlTweetId = match ? match.groups.tweetid : -1 // if match === true(exist) return ? or :\n\n    // handle view link button\n    const isDetail = `${tweet.id}` === `${urlTweetId}` // return true or false\n    const handleDetailLink = (event) => {\n        event.preventDefault()\n        // handle link redirection\n        window.location.href = `${tweet.id}`\n    }\n\n    // display parent tweet\n    const handlePerformAction = (newActionTweet, status) => {\n        if (status === 200) {\n            setActionTweet(newActionTweet)\n\n        } else if (status === 201) {\n            if (didRetweet) {\n                didRetweet(newActionTweet)\n            }\n        }\n    }\n    return (\n        <div className={className}>\n            {isRetweet === true && <div className='mb-3'> <span className='small text-muted'>Retweet via <UserDisplay user={retweeter} /></span></div>}\n            <div className=\"d-flex\">\n                <div className='col-1'>\n                    <UserPicture user={tweet.user} />\n                </div>\n                <div className=\"col-11\">\n                    {/* All content here */}\n                    <div>\n                        <p>\n                            <UserDisplay includeFullName user={tweet.user} />\n                        </p>\n\n                        < p >{tweet.content}</p >\n                        < ParentTweet tweet={tweet} retweeter={tweet.user} />\n                    </div>\n\n                    <div className='btn btn-group px-0'>\n                        {(actionTweet && hiddenActions !== true) &&\n                            <React.Fragment>\n                                <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{ type: 'like', display: 'Likes' }} />\n                                <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{ type: 'unlike', display: 'UnLikes' }} />\n                                <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{ type: 'retweet', display: 'Retweet' }} />\n                            </React.Fragment>}\n                        {isDetail === true ? null : <button id=\"viewLink\" className=\"btn btn-outline-primary btn-sm\" onClick={handleDetailLink}> View </button>}\n                    </div>\n                </div>\n            </div>\n        </div >\n\n    );\n}\n","import React, { useEffect, useState } from 'react'\nimport { apiTweetList } from './lookup'\nimport { Tweet } from './detail'\n\n// Tweet sections\nexport const TweetsList = (props) => {\n    const [tweetsInit, setTweetsInit] = useState([])\n    const [tweets, setTweets] = useState([])\n    const [nextUrl, setNextUrl] = useState(null)\n    const [tweetsDidset, setTweetsDidset] = useState(false)\n    useEffect(() => {\n        const finalList = [...props.newtweets].concat(tweetsInit)\n        if (tweets.length !== finalList.length) {\n            setTweets(finalList)\n        }\n    }, [props.newtweets, tweets, tweetsInit])\n\n    useEffect(() => {\n        if (tweetsDidset === false) {\n            // do my lookup\n            const handleTweetListLookup = (response, status) => {\n                if (status === 200) {\n                    setNextUrl(response.next)\n                    setTweetsInit(response.results) // from api views see response,you can know results\n                    setTweetsDidset(true)\n                }\n            }\n            apiTweetList(props.username, handleTweetListLookup)\n        }\n    }, [tweetsInit, tweetsDidset, setTweetsDidset, props.username])\n\n    const handleDidRetweet = (newTweet) => {\n        const updatetweetsInit = [...tweetsInit]\n        updatetweetsInit.unshift(newTweet)\n        setTweetsInit(updatetweetsInit)\n\n        const updateFinalTweets = [...tweets]\n        updateFinalTweets.unshift(tweets) // why tweets not newTweet?\n        setTweets(updateFinalTweets)\n    }\n\n    const handleNextPage = (e) => {\n        e.preventDefault()\n        if (nextUrl !== null) {\n            const handleBackendNextPageButton = (response, status) => {\n                if (status === 200) {\n                    setNextUrl(response.next)\n                    // keep on loading: scroll down to display new page tweets\n                    const newTweetsList = [...tweets].concat(response.results)\n                    setTweetsInit(newTweetsList) // from api views see response,you can know results\n                    setTweets(newTweetsList)\n                }\n            }\n            apiTweetList(props.username, handleBackendNextPageButton, nextUrl)\n        }\n    }\n    return <React.Fragment>\n        {tweets.map((item, index) => {\n            return <Tweet\n                tweet={item}\n                didRetweet={handleDidRetweet}\n                className='my-5 py-5 border bg-white text-dark'\n                key={`${index}-{ item.id }`} /> // `` NOT ''\n        })}\n        {nextUrl != null && <button className=\"btn btn-outline-primary\" onClick={handleNextPage}>Next Page</button>}\n    </React.Fragment>\n}\n","import React, { useEffect, useState } from 'react'\nimport { apiTweetFeed } from './lookup'\nimport { Tweet } from './detail'\n\n\n// Tweet sections\nexport const TweetsFeedList = (props) => {\n    const [tweetsInit, setTweetsInit] = useState([])\n    const [tweets, setTweets] = useState([])\n    const [nextUrl, setNextUrl] = useState(null)\n    const [tweetsDidset, setTweetsDidset] = useState(false)\n    useEffect(() => {\n        const finalList = [...props.newtweets].concat(tweetsInit)\n        if (tweets.length !== finalList.length) {\n            setTweets(finalList)\n        }\n    }, [props.newtweets, tweets, tweetsInit])\n\n    useEffect(() => {\n        if (tweetsDidset === false) {\n            // do my lookup\n            const handleTweetListLookup = (response, status) => {\n                if (status === 200) {\n                    setNextUrl(response.next)\n                    setTweetsInit(response.results) // from api views see response,you can know results\n                    setTweetsDidset(true)\n                }\n            }\n            apiTweetFeed(handleTweetListLookup)\n        }\n    }, [tweetsInit, tweetsDidset, setTweetsDidset, props.username])\n\n    const handleDidRetweet = (newTweet) => {\n        const updatetweetsInit = [...tweetsInit]\n        updatetweetsInit.unshift(newTweet)\n        setTweetsInit(updatetweetsInit)\n\n        const updateFinalTweets = [...tweets]\n        updateFinalTweets.unshift(tweets) // why tweets not newTweet?\n        setTweets(updateFinalTweets)\n    }\n\n    const handleNextPage = (e) => {\n        e.preventDefault()\n        if (nextUrl !== null) {\n            const handleBackendNextPageButton = (response, status) => {\n                if (status === 200) {\n                    setNextUrl(response.next)\n                    // keep on loading: scroll down to display new page tweets\n                    const newTweetsList = [...tweets].concat(response.results)\n                    setTweetsInit(newTweetsList) // from api views see response,you can know results\n                    setTweets(newTweetsList)\n                }\n            }\n            apiTweetFeed(handleBackendNextPageButton, nextUrl)\n        }\n    }\n    return <React.Fragment>\n        {tweets.map((item, index) => {\n            return <Tweet\n                tweet={item}\n                didRetweet={handleDidRetweet}\n                className='my-5 py-5 border bg-white text-dark'\n                key={`${index}-{ item.id }`} /> // `` NOT ''\n        })}\n        {nextUrl != null && <button className=\"btn btn-outline-primary\" onClick={handleNextPage}>Next Page</button>}\n    </React.Fragment>\n}","import React from 'react'\nimport { apiTweetCreate } from './lookup'\n\nexport function TweetCreate(props) {\n    var textAreaRef = React.createRef()\n    const { didTweet } = props\n    const handleSumbitForm = (event) => {\n        event.preventDefault()\n        const newValue = textAreaRef.current.value\n\n        // backend API response\n        const BackendTweetCreateUpdate = (response, status) => {\n            if (status === 201) {\n                didTweet(response)\n            }\n            else {\n                console.log(response)\n                alert(\"An error occured\")\n            }\n        }\n        // change this to a server side call\n        apiTweetCreate(newValue, BackendTweetCreateUpdate)\n        textAreaRef.current.value = ''\n    }\n\n    return (\n        <div className={props.className}>\n            <form onSubmit={handleSumbitForm}>\n                <textarea required className='form-control mt-5' name=\"tweet\" ref={textAreaRef}></textarea>\n                <button type=\"submit\" className=\"btn btn-primary my-2\">Tweet</button>\n            </form>\n        </div>\n    );\n\n}","import React, { useState, useEffect } from 'react'\nimport { TweetsList } from './list'\nimport { TweetsFeedList } from './feed'\nimport { TweetCreate } from './create'\nimport { apiTweetDetail } from './lookup'\nimport { Tweet } from './detail'\n\n//Feed Form Sections\nexport const FeedFormComponents = (props) => {\n    // from index.html data-can-tweet will automatically change to 'data-cantweet'\n    // const { cantweet } = props\n\n    const [newtweets, setNewtweets] = useState([])\n    // change string to a boolean value\n    const canTweet = props.cantweet === 'false' ? false : true\n\n    const handleNewTweet = (newTweet) => {\n        let tempNewtweets = [...newtweets] // create an array of new tweets\n        tempNewtweets.unshift(newTweet)\n        setNewtweets(tempNewtweets)\n    }\n\n    return (\n        <div className={props.className}>\n            {canTweet === true &&\n                <TweetCreate didTweet={handleNewTweet} className=\"col-12 mb-3\" />}\n            <TweetsFeedList {...props} newtweets={newtweets} />\n        </div>\n    );\n}\n\n//Form Sections\nexport const TweetForm = (props) => {\n    // from index.html data-can-tweet will automatically change to 'data-cantweet'\n    // const { cantweet } = props\n\n    const [newtweets, setNewtweets] = useState([])\n    // change string to a boolean value\n    const canTweet = props.cantweet === 'false' ? false : true\n\n    const handleNewTweet = (newTweet) => {\n        let tempNewtweets = [...newtweets] // create an array of new tweets\n        tempNewtweets.unshift(newTweet)\n        setNewtweets(tempNewtweets)\n    }\n\n    return (\n        <div className={props.className}>\n            {canTweet === true &&\n                <TweetCreate didTweet={handleNewTweet} className=\"col-12 mb-3\" />}\n            <TweetsList {...props} newtweets={newtweets} />\n        </div>\n    );\n}\n\n// Tweet Detail Section\nexport const TweetDetailComponent = (props) => {\n    const { tweetId } = props\n    const [didLookup, setDidLookup] = useState(false)\n    const [tweet, setTweet] = useState(null)\n    const handleBackendLookup = (response, status) => {\n        if (status === 200) {\n            setTweet(response)\n        } else {\n            alert(\"There was an error finding your tweet.\")\n        }\n    }\n\n    useEffect(() => {\n        if (didLookup === false) {\n            apiTweetDetail(tweetId, handleBackendLookup)\n            setDidLookup(true)\n        }\n    }, [tweetId, didLookup, setDidLookup])\n    return tweet === null ? null : <Tweet tweet={tweet} className={props.className} />\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { TweetForm, TweetDetailComponent, FeedFormComponents } from './tweets';\nimport reportWebVitals from './reportWebVitals';\n\n\nconst e = React.createElement\nconst rId = document.getElementById('tweetme');\nconst feedId = document.getElementById('tweetme-feed');\nconst TweetDetailElement = document.querySelectorAll('.tweetme-detail')\n\n// add children or props to TweetForm component\n// ReactDOM.render(e(App, rId.dataset), rId);\nif (rId) {\n    ReactDOM.render(e(TweetForm, rId.dataset), rId);\n    console.log(rId)\n}\n\nif (feedId) {\n    ReactDOM.render(e(FeedFormComponents, feedId.dataset), feedId);\n    console.log(feedId)\n}\n\nTweetDetailElement.forEach(container => {\n    ReactDOM.render(e(TweetDetailComponent, container.dataset), container);\n    console.log(container)\n})\n\n\n\n// ReactDOM.render(\n//     <React.StrictMode>\n//       <App />\n//     </React.StrictMode>,\n//     document.getElementById('root')\n//   );\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}